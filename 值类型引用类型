1 内存分配不同：
值类型的内存区域是连续的，至于分在栈上还是堆上讨论
  值类型struct 用来定义局部变量，栈上
  值类型struct用来定义引用类型class的字段，总是堆上
  值类型struct用来定义值类型struct2，看struct2是分配在栈上还是在堆上
  如果把值类型struct1赋予引用类型class1（或一个接口），会在堆上建立一个struct1的拷贝，叫装箱
引用类型内存区域分两部分：一部分是引用（类似c++指针）一部分是实际的对象，对象本身总是分配在堆上，二引用分配看情况
   如果定义局部变量，引用->栈上
   定义引用类型字段 引用-->堆上
   用于定义值类型的字段，引用分配取决于该值类型分配在堆上还是在栈上
   
   
   堆栈内存分配不同在于：栈上：出栈的时候迅速释放，不用回收器回收，栈上的定义的对象无法持久存储，栈上的空间有限，堆空间大
   
  2 变量传递方式不同
     引用类型传递：只传递引用本身
     值类型在传递会进行对象的拷贝
  3 对象释放方式不同
    引用类型进行引用计数，引用计数为0时，等待回收
    值类型：分配在堆上
    
    
    
    。。。待更新
    
    cost 和readonly区别
    const可以用于类的成员常量和局部常量，必须在声明时赋值，之后不可以对常量进行赋值
    reaonly ：类的成员，在声明时可以不赋值，除了在构造函数中赋值外都不可再次赋值
    
    单例模式
    Singleton模式包含的角色只有一个，就是singleton。singleton拥有一个私有构造函数，
    确保用户无法通过new直接实例ta 
    class Singleton
    {
      private static Singleton intance = null;
      public static Singleton Instance()
      {
         if(instance==null)
           instance = new Singleton();
         return instance;
           
        }
       }
       
       使用时
        Singleton obj = Singleton.Instance();
        
        
        接口是负责功能的定义，项目中通过接口来规范类，操作类，以及抽象类的概念
        类是负责功能的具体实现；一个类可以继承一个基类，但可以实现多个接口
